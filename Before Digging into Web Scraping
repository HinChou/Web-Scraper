***
You Don’t Always Need a Hammer: 

• Look for a “print this page” link, or perhaps a mobile version of the site that has better-formatted HTML 

• Look for the information hidden in a JavaScript file. Remember, you might need to examine the imported JavaScript files 
in order to do this. For example, I once collected street addresses (along with latitude and longitude) off a website in a
neatly formatted array by looking at the JavaScript for the embedded Google Map that displayed a pinpoint over each address.

• This is more common for page titles, but the information might be available in the URL of the page itself.

• If the information you are looking for is unique to this website for some reason, you’re out of luck. If not, 
try to think of other sources you could get this information from. Is there another website with the same data? 
Is this website displaying data that it scraped or aggregated from another website?


*** From "Web Scraping with Python by Ryan Mitchell (O’Reilly). Copyright 2015 Ryan Mitchell, 978-1-491-91029-0.”

The common reason Why we need the "Web Scraping" is data gathering. But instead of start digging into it, it's important to 
take a deep breath and think of alternatives. 

As the paragraph mentioned above, it is common and possible to find a text based html, which is even more convenient than parsing 
a well-formatted orginal html. For this, a common method is using "inspect" option in the browser like Chrome, to find those 
text based html or data based html.
